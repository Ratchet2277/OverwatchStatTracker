// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Initializer.Migrations
{
    [DbContext(typeof(TrackerContext))]
    [Migration("20210617135719_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainModel.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllieScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnemyScore")
                        .HasColumnType("int");

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Sr")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("DomainModel.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("DomainModel.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("DomainModel.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("DomainModel.SquadMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SquadMembers");
                });

            modelBuilder.Entity("GameHero", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("HeroesId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "HeroesId");

                    b.HasIndex("HeroesId");

                    b.ToTable("GameHero");
                });

            modelBuilder.Entity("GameSquadMember", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("SquadMembersId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "SquadMembersId");

                    b.HasIndex("SquadMembersId");

                    b.ToTable("GameSquadMember");
                });

            modelBuilder.Entity("HeroSeason", b =>
                {
                    b.Property<int>("HeroPoolId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonsId")
                        .HasColumnType("int");

                    b.HasKey("HeroPoolId", "SeasonsId");

                    b.HasIndex("SeasonsId");

                    b.ToTable("HeroSeason");
                });

            modelBuilder.Entity("MapSeason", b =>
                {
                    b.Property<int>("MapPoolId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonsId")
                        .HasColumnType("int");

                    b.HasKey("MapPoolId", "SeasonsId");

                    b.HasIndex("SeasonsId");

                    b.ToTable("MapSeason");
                });

            modelBuilder.Entity("DomainModel.Game", b =>
                {
                    b.HasOne("DomainModel.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.HasOne("DomainModel.Season", "Season")
                        .WithMany("Games")
                        .HasForeignKey("SeasonId");

                    b.Navigation("Map");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GameHero", b =>
                {
                    b.HasOne("DomainModel.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Hero", null)
                        .WithMany()
                        .HasForeignKey("HeroesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameSquadMember", b =>
                {
                    b.HasOne("DomainModel.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.SquadMember", null)
                        .WithMany()
                        .HasForeignKey("SquadMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroSeason", b =>
                {
                    b.HasOne("DomainModel.Hero", null)
                        .WithMany()
                        .HasForeignKey("HeroPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapSeason", b =>
                {
                    b.HasOne("DomainModel.Map", null)
                        .WithMany()
                        .HasForeignKey("MapPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainModel.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainModel.Season", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
